import express from 'express';
import Imap from 'imap-simple';
import cors from 'cors';
import { load } from 'cheerio';

const app = express();
app.use(cors());
app.use(express.json());

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π —Å—Å—ã–ª–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
function extractVerificationLink(htmlContent, textContent) {
  console.log('üîç –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...');

  let link = null;

  // –ò—â–µ–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –≤ HTML
  if (htmlContent) {
    // –û–¢–õ–ê–î–ö–ê: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç HTML —Å blsinternational
    const blsIndex = htmlContent.indexOf('blsinternational');
    if (blsIndex !== -1) {
      const start = Math.max(0, blsIndex - 200);
      const end = Math.min(htmlContent.length, blsIndex + 500);
      console.log('üîç HTML —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å blsinternational:');
      console.log(htmlContent.substring(start, end));
    }

    // –ò—â–µ–º href —Å –ø–æ–ª–Ω—ã–º URL - –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –í–°–ï –¥–æ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π –∫–∞–≤—ã—á–∫–∏
    const hrefMatch = htmlContent.match(/href=["']([^"']*blsinternational\.com[^"']*)["']/i);
    if (hrefMatch) {
      link = hrefMatch[1];
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≤ HTML:', link);
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –ª—é–±—É—é —Å—Å—ã–ª–∫—É —Å blsinternational - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û —à–∏—Ä–æ–∫–∏–π regex
    if (!link) {
      // –ò—â–µ–º –≤—Å–µ —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç blsinternational –¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–±–µ–ª–∞ –∏–ª–∏ –∫–∞–≤—ã—á–∫–∏
      const urlMatch = htmlContent.match(/(https?:\/\/[^"\s<>]*blsinternational\.com[^"\s<>]*)/i);
      if (urlMatch) {
        link = urlMatch[1];
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ regex:', link);
      }
    }
  }

  // –ï—Å–ª–∏ –≤ HTML –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ - —Å–∞–º—ã–π —à–∏—Ä–æ–∫–∏–π –ø–æ–∏—Å–∫
  if (!link && textContent) {
    const textUrlMatch = textContent.match(/(https?:\/\/[^\s]+blsinternational\.com[^\s]*)/i);
    if (textUrlMatch) {
      link = textUrlMatch[1];
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ:', link);
    }
  }

  if (link) {
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ HTML entities, –ù–ï URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    link = link.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>');
    console.log('üîó –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:', link);
    return link;
  }

  console.log('‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  return null;
}

app.post('/mail', async (req, res) => {
  const { email, password } = req.body;
  if (!email || !password) {
    return res.status(400).json({ error: 'email and password required' });
  }

  console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ IMAP –¥–ª—è: ${email}`);

  const config = {
    imap: {
      user: email,
      password,
      host: 'imap.firstmail.ltd',
      port: 993,
      tls: true,
      tlsOptions: {
        rejectUnauthorized: false,
        servername: 'imap.firstmail.ltd'
      },
      authTimeout: 10000,
      connTimeout: 10000
    }
  };

  let connection = null;

  try {
    console.log('–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ IMAP —Å–µ—Ä–≤–µ—Ä—É...');
    connection = await Imap.connect(config);
    console.log('IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    await connection.openBox('INBOX');
    console.log('INBOX –æ—Ç–∫—Ä—ã—Ç');

    // –ò—â–µ–º –ø–∏—Å—å–º–∞ –æ—Ç noreply.app@blsinternational.com —Å —Ç–µ–º–æ–π OTP Confirmation
    const criteria = [
      ['FROM', 'noreply.app@blsinternational.com'],
      ['SUBJECT', 'OTP Confirmation']
    ];

    const fetchOptions = {
      bodies: ['HEADER', 'TEXT', ''], // –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ —Å–µ–∫—Ü–∏–∏
      struct: true,
      markSeen: false
    };

    console.log('–ò—â–µ–º –ø–∏—Å—å–º–∞ —Å OTP...');
    const messages = await connection.search(criteria, fetchOptions);

    if (!messages.length) {
      console.log('–ü–∏—Å—å–º–∞ —Å OTP –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      await connection.end();
      return res.json({ message: 'No OTP Confirmation emails found' });
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º: ${messages.length}`);

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –±–µ—Ä—ë–º —Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ
    messages.sort((a, b) => {
      const dateA = new Date(a.attributes.date);
      const dateB = new Date(b.attributes.date);
      return dateB - dateA;
    });

    const latest = messages[0];
    console.log('–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏—Å—å–º–∞:', latest.attributes.date);

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
    let emailBody = '';
    let htmlContent = '';

    if (latest.parts && latest.parts.length > 0) {
      console.log('–ß–∞—Å—Ç–∏ –ø–∏—Å—å–º–∞:', latest.parts.map(p => ({ which: p.which, size: p.body ? p.body.length : 0 })));

      for (const part of latest.parts) {
        if (part.body && typeof part.body === 'string') {
          emailBody += part.body + '\n';

          // –ò—â–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –ª—é–±–æ–π —á–∞—Å—Ç–∏
          if (part.body.includes('<html') || part.body.includes('<a href') || part.body.includes('<table')) {
            htmlContent = part.body;
            console.log('HTML –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Å—Ç–∏:', part.which, '–¥–ª–∏–Ω–∞:', htmlContent.length);
          }
        }
      }
    }

    await connection.end();
    console.log('IMAP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');

    if (!emailBody) {
      console.log('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return res.status(500).json({
        error: 'Email body not found',
        debug: {
          messageCount: messages.length,
          latestDate: latest.attributes.date,
          partsCount: latest.parts ? latest.parts.length : 0
        }
      });
    }

    console.log('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞ –Ω–∞–π–¥–µ–Ω–æ, –æ–±—â–∞—è –¥–ª–∏–Ω–∞:', emailBody.length);

    console.log('–ò—â–µ–º —Å—Å—ã–ª–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    let link = extractVerificationLink(htmlContent, emailBody);

    if (!link) {
      console.log('–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã...');

      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ HTML
      if (htmlContent) {
        const $ = load(htmlContent);

        // –ò—â–µ–º –ª—é–±—É—é —Å—Å—ã–ª–∫—É —Å blsinternational (–ë–ï–ó –æ—á–∏—Å—Ç–∫–∏!)
        const blsLink = $('a[href*="blsinternational"]').attr('href');
        if (blsLink) {
          link = blsLink; // –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º cleanAndDecodeUrl!
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ BLS —Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ cheerio:', link);
        }
      }

      // –ü–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–µ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —à–∏—Ä–æ–∫–∏–π –ø–æ–∏—Å–∫
      if (!link) {
        const urlRegex = /(https?:\/\/[^\s\n\r\t]+blsinternational\.com[^\s\n\r\t]*)/gi;
        const matches = emailBody.match(urlRegex);
        if (matches && matches.length > 0) {
          console.log('üîç –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ:');
          matches.forEach((match, i) => {
            console.log(`  ${i + 1}. –î–ª–∏–Ω–∞: ${match.length}, URL: ${match.substring(0, 150)}...`);
          });

          // –ë–µ—Ä–µ–º —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é —Å—Å—ã–ª–∫—É (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
          link = matches.reduce((longest, current) =>
            current.length > longest.length ? current : longest
          );
          console.log('‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞:', link.substring(0, 200) + '...');
        } else {
          console.log('‚ùå –ù–∏–∫–∞–∫–∏—Ö —Å—Å—ã–ª–æ–∫ blsinternational –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–µ–∫—Å—Ç–µ');

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤ email –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          console.log('üìß –ù–∞—á–∞–ª–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ email:');
          console.log(emailBody.substring(0, 2000));
        }
      }
    }

    console.log('–§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞–π–¥–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞:', link);

    if (!link) {
      console.log('–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∏—Å—å–º–µ');
      return res.status(500).json({
        error: 'Verification link not found',
        debug: {
          bodyLength: emailBody.length,
          bodyPreview: emailBody.substring(0, 1000),
          hasHtmlContent: !!htmlContent,
          htmlContentLength: htmlContent.length,
          containsClickHere: emailBody.toLowerCase().includes('click here'),
          containsHttp: emailBody.includes('http'),
          containsBls: emailBody.includes('blsinternational'),
          containsOtpVerify: emailBody.includes('email_otp_verify')
        }
      });
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É
    console.log('–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
    res.json({ link });

  } catch (err) {
    console.error('IMAP Error:', err);

    if (connection) {
      try {
        await connection.end();
      } catch (closeErr) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', closeErr);
      }
    }

    let errorMessage = err.message;
    if (err.textCode === 'AUTHENTICATIONFAILED') {
      errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è IMAP';
    } else if (err.message.includes('timeout')) {
      errorMessage = '–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ IMAP —Å–µ—Ä–≤–µ—Ä—É';
    } else if (err.message.includes('ENOTFOUND')) {
      errorMessage = 'IMAP —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
    } else if (err.message.includes('Invalid BODY')) {
      errorMessage = '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ IMAP –∑–∞–ø—Ä–æ—Å–∞';
    }

    res.status(500).json({
      error: errorMessage,
      details: err.message
    });
  }
});

app.get('/', (req, res) => {
  res.send('Firstmail IMAP API up and running');
});

app.get('/test', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    server: 'imap.firstmail.ltd:993'
  });
});

const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`Server started on port ${port}`);
  console.log(`Test endpoint: http://localhost:${port}/test`);
});
