import express from 'express';
import Imap from 'imap';
import { simpleParser } from 'mailparser';
import cors from 'cors';

const app = express();
app.use(cors());
app.use(express.json());

app.post('/mail', async (req, res) => {
    const { email, password, subject, sender } = req.body;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const searchSubject = subject || 'Slovakia Visa Appointment Booking Link';
    const searchSender = sender || 'noreply.app@blsinternational.com';
    
    console.log(`üîç –ü–æ–∏—Å–∫ –ø–∏—Å—å–º–∞ —Å —Ç–µ–º–æ–π: "${searchSubject}" –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: "${searchSender}"`);

    if (!email || !password) {
        return res.status(400).json({ 
            error: 'Email –∏ password –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
            message: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–µ'
        });
    }

    const imap = new Imap({
        user: email,
        password: password,
        host: 'imap.gmail.com',
        port: 993,
        tls: true,
        tlsOptions: { rejectUnauthorized: false }
    });

    try {
        await new Promise((resolve, reject) => {
            imap.once('ready', () => {
                console.log('‚úÖ IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                resolve();
            });

            imap.once('error', (err) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err);
                reject(err);
            });

            imap.connect();
        });

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É INBOX
        await new Promise((resolve, reject) => {
            imap.openBox('INBOX', false, (err, box) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è INBOX:', err);
                    reject(err);
                } else {
                    console.log('üì¨ INBOX –æ—Ç–∫—Ä—ã—Ç, –≤—Å–µ–≥–æ –ø–∏—Å–µ–º:', box.messages.total);
                    resolve(box);
                }
            });
        });

        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
        const searchCriteria = [
            'UNSEEN', // –¢–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
            ['SUBJECT', searchSubject],
            ['FROM', searchSender]
        ];

        console.log('üîç –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:', searchCriteria);

        // –ò—â–µ–º –ø–∏—Å—å–º–∞
        const uids = await new Promise((resolve, reject) => {
            imap.search(searchCriteria, (err, results) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', err);
                    reject(err);
                } else {
                    console.log('üì® –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º:', results.length);
                    resolve(results);
                }
            });
        });

        if (uids.length === 0) {
            imap.end();
            return res.json({ 
                message: `–ü–∏—Å—å–º–∞ —Å —Ç–µ–º–æ–π "${searchSubject}" –æ—Ç "${searchSender}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`,
                found: false
            });
        }

        // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–∏—Å—å–º–æ
        const latestUid = Math.max(...uids);
        console.log('üìß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∏—Å—å–º–æ —Å UID:', latestUid);

        // –ü–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–º–æ
        const emailData = await new Promise((resolve, reject) => {
            const fetch = imap.fetch([latestUid], { bodies: '' });
            let emailContent = '';

            fetch.on('message', (msg) => {
                msg.on('body', (stream) => {
                    let buffer = '';
                    stream.on('data', (chunk) => {
                        buffer += chunk.toString('utf8');
                    });
                    stream.once('end', () => {
                        emailContent = buffer;
                    });
                });
            });

            fetch.once('error', (err) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å—å–º–∞:', err);
                reject(err);
            });

            fetch.once('end', () => {
                console.log('‚úÖ –ü–∏—Å—å–º–æ –ø–æ–ª—É—á–µ–Ω–æ');
                resolve(emailContent);
            });
        });

        // –ü–∞—Ä—Å–∏–º –ø–∏—Å—å–º–æ
        const parsed = await simpleParser(emailData);
        console.log('üìã –¢–µ–º–∞ –ø–∏—Å—å–º–∞:', parsed.subject);
        console.log('üì§ –û—Ç:', parsed.from?.text);

        // –ò—â–µ–º —Å—Å—ã–ª–∫—É –≤ –ø–∏—Å—å–º–µ
        let link = null;
        const content = parsed.html || parsed.text || '';
        
        // –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫
        const linkPatterns = [
            /https?:\/\/[^\s<>"']+blsinternational\.com[^\s<>"']*/gi,
            /https?:\/\/url\d+\.blsinternational\.com[^\s<>"']*/gi,
            /https?:\/\/[^\s<>"']*appointment[^\s<>"']*/gi,
            /https?:\/\/[^\s<>"']*booking[^\s<>"']*/gi
        ];

        for (const pattern of linkPatterns) {
            const matches = content.match(pattern);
            if (matches && matches.length > 0) {
                // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
                link = matches[0];
                // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö HTML —Å–∏–º–≤–æ–ª–æ–≤
                link = link.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>');
                console.log('üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞:', link);
                break;
            }
        }

        // –ü–æ–º–µ—á–∞–µ–º –ø–∏—Å—å–º–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        imap.addFlags([latestUid], ['\\Seen'], (err) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏ –ø–∏—Å—å–º–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:', err);
            } else {
                console.log('‚úÖ –ü–∏—Å—å–º–æ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ');
            }
        });

        imap.end();

        if (link) {
            console.log('‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∞:', link);
            res.json({ 
                link: link,
                found: true,
                subject: parsed.subject,
                from: parsed.from?.text
            });
        } else {
            console.log('‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∏—Å—å–º–µ');
            res.json({ 
                message: '–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∏—Å—å–º–µ',
                found: false,
                subject: parsed.subject,
                from: parsed.from?.text
            });
        }

    } catch (error) {
        console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
        
        if (imap.state !== 'disconnected') {
            imap.end();
        }

        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—á—Ç—ã',
            message: error.message,
            found: false
        });
    }
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/status', (req, res) => {
    res.json({ 
        status: 'active',
        message: 'IMAP —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç',
        timestamp: new Date().toISOString()
    });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`üöÄ IMAP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìß –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é`);
});

export default app;
