import express from 'express';
import Imap from 'imap-simple';
import cors from 'cors';
import { load } from 'cheerio';

const app = express();
app.use(cors());
app.use(express.json());

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Quoted-Printable
function decodeQuotedPrintable(str) {
  if (!str) return str;
  
  return str
    .replace(/=\r?\n/g, '') // –£–±–∏—Ä–∞–µ–º –º—è–≥–∫–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    .replace(/=([0-9A-F]{2})/gi, (match, hex) => {
      return String.fromCharCode(parseInt(hex, 16));
    })
    .replace(/=3D/g, '=') // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è =3D -> =
    .replace(/=20/g, ' ') // –ü—Ä–æ–±–µ–ª—ã
    .replace(/=09/g, '\t'); // –¢–∞–±—ã
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π —Å—Å—ã–ª–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ OTP
function extractVerificationLink(htmlContent, textContent) {
  console.log('üîç –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ OTP...');
  console.log('üìä –†–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞: HTML =', htmlContent?.length || 0, 'TEXT =', textContent?.length || 0);

  // –î–ï–ö–û–î–ò–†–£–ï–ú Quoted-Printable –ü–ï–†–ï–î –ø–æ–∏—Å–∫–æ–º!
  if (htmlContent && htmlContent.includes('=3D')) {
    console.log('üîß –î–µ–∫–æ–¥–∏—Ä—É–µ–º Quoted-Printable –≤ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–µ...');
    const originalLength = htmlContent.length;
    htmlContent = decodeQuotedPrintable(htmlContent);
    console.log('üìè –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', originalLength, '->', htmlContent.length);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø–æ—Å–ª–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    const blsIndex = htmlContent.indexOf('blsinternational');
    if (blsIndex !== -1) {
      const start = Math.max(0, blsIndex - 200);
      const end = Math.min(htmlContent.length, blsIndex + 1000);
      console.log('üîç HTML —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ü–û–°–õ–ï –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:');
      console.log(htmlContent.substring(start, end));
    }
  }

  if (textContent && textContent.includes('=3D')) {
    console.log('üîß –î–µ–∫–æ–¥–∏—Ä—É–µ–º Quoted-Printable –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ...');
    textContent = decodeQuotedPrintable(textContent);
  }

  let link = null;

  if (htmlContent) {
    // –û–¢–õ–ê–î–ö–ê: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç HTML —Å blsinternational
    const blsIndex = htmlContent.indexOf('blsinternational');
    if (blsIndex !== -1) {
      const start = Math.max(0, blsIndex - 100);
      const end = Math.min(htmlContent.length, blsIndex + 800);
      console.log('üîç HTML —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å blsinternational:');
      console.log(htmlContent.substring(start, end));
    }

    // –û–¢–õ–ê–î–ö–ê: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ href —Å blsinternational
    console.log('üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö href —Å blsinternational:');
    const hrefRegex = /href=["']([^"']*blsinternational[^"']*)["']/gi;
    let match;
    while ((match = hrefRegex.exec(htmlContent)) !== null) {
      console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–π href:', match[1]);
      console.log('–î–ª–∏–Ω–∞ href:', match[1].length);
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô regex –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –í–°–ï–ô —Å—Å—ã–ª–∫–∏
    const hrefMatch = htmlContent.match(/href=["']([^"']*blsinternational\.com[^"']*)["']/i);
    if (hrefMatch) {
      link = hrefMatch[1];
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≤ HTML:', link);
      console.log('üìè –î–ª–∏–Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏:', link.length);
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ href, –∏—â–µ–º –ø—Ä—è–º–æ –≤ —Ç–µ–∫—Å—Ç–µ HTML
    if (!link) {
      console.log('üîç –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ regex –≤ HTML —Ç–µ–∫—Å—Ç–µ...');
      const urlMatch = htmlContent.match(/(https?:\/\/[^\s"'<>]*blsinternational\.com[^\s"'<>]*)/i);
      if (urlMatch) {
        link = urlMatch[1];
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ regex –≤ HTML:', link);
        console.log('üìè –î–ª–∏–Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏:', link.length);
      }
    }
  }

  // –ü–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
  if (!link && textContent) {
    console.log('üîç –ü–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–º...');
    const textUrlMatch = textContent.match(/(https?:\/\/[^\s]*blsinternational\.com[^\s]*)/i);
    if (textUrlMatch) {
      link = textUrlMatch[1];
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ:', link);
      console.log('üìè –î–ª–∏–Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏:', link.length);
    }
  }

  if (link) {
    console.log('üîó –°—Å—ã–ª–∫–∞ –î–û –æ–±—Ä–∞–±–æ—Ç–∫–∏:', link);

    // –í–ê–ñ–ù–û: –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ HTML entities, –ù–ï —Ç—Ä–æ–≥–∞–µ–º URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã!
    const originalLink = link;
    link = link.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"');

    console.log('üîó –°—Å—ã–ª–∫–∞ –ü–û–°–õ–ï –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è HTML entities:', link);
    console.log('üìè –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª–∏–Ω—ã:', originalLink.length, '->', link.length);

    // –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–Ω—Ü–µ
    const beforeCleanup = link;
    link = link.replace(/[>\]}\)]*$/, '');

    if (beforeCleanup !== link) {
      console.log('üßπ –£–±—Ä–∞–ª–∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–Ω—Ü–µ:', beforeCleanup, '->', link);
    }

    console.log('üîó –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:', link);
    console.log('üìè –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞:', link.length);

    // –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è, —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞
    if (link.length < 100) {
      console.warn('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°—Å—ã–ª–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∞—è!');
    }

    return link;
  }

  console.log('‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–ø–∏—Å—å –∏–∑ –ø–∏—Å—å–º–∞ –æ –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤–∏–∑—É
function extractAppointmentLink(htmlContent, textContent) {
  console.log('üîç –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å –∏–∑ –ø–∏—Å—å–º–∞ –æ –≤–∏–∑–µ –°–ª–æ–≤–∞–∫–∏–∏...');
  console.log('üìä –†–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞: HTML =', htmlContent?.length || 0, 'TEXT =', textContent?.length || 0);

  // –î–ï–ö–û–î–ò–†–£–ï–ú Quoted-Printable –ü–ï–†–ï–î –ø–æ–∏—Å–∫–æ–º!
  if (htmlContent && htmlContent.includes('=3D')) {
    console.log('üîß –î–µ–∫–æ–¥–∏—Ä—É–µ–º Quoted-Printable –≤ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–µ...');
    htmlContent = decodeQuotedPrintable(htmlContent);
  }

  if (textContent && textContent.includes('=3D')) {
    console.log('üîß –î–µ–∫–æ–¥–∏—Ä—É–µ–º Quoted-Printable –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ...');
    textContent = decodeQuotedPrintable(textContent);
  }

  let link = null;

  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∑–∞–ø–∏—Å—å
  const appointmentPatterns = [
    // –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ blsinternational —Å appointment –≤ URL
    /(https?:\/\/[^\s"'<>]*blsinternational\.com[^\s"'<>]*appointment[^\s"'<>]*)/i,
    // –°—Å—ã–ª–∫–∏ –Ω–∞ blsinternational —Å booking –≤ URL
    /(https?:\/\/[^\s"'<>]*blsinternational\.com[^\s"'<>]*booking[^\s"'<>]*)/i,
    // –°—Å—ã–ª–∫–∏ –Ω–∞ blsinternational —Å visa –≤ URL
    /(https?:\/\/[^\s"'<>]*blsinternational\.com[^\s"'<>]*visa[^\s"'<>]*)/i,
    // –õ—é–±—ã–µ –¥–ª–∏–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ blsinternational (—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
    /(https?:\/\/[^\s"'<>]*blsinternational\.com[^\s"'<>]{50,})/i,
    // –û–±—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è blsinternational
    /(https?:\/\/[^\s"'<>]*blsinternational\.com[^\s"'<>]*)/i
  ];

  // –ü–æ–∏—Å–∫ –≤ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–µ
  if (htmlContent) {
    console.log('üîç –ü–æ–∏—Å–∫ –≤ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–µ...');
    
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ href –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
    const hrefMatches = htmlContent.match(/href=["']([^"']*blsinternational\.com[^"']*)["']/gi);
    if (hrefMatches) {
      console.log('üîó –ù–∞–π–¥–µ–Ω–Ω—ã–µ href —Å—Å—ã–ª–∫–∏:', hrefMatches);
      // –ë–µ—Ä–µ–º —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é —Å—Å—ã–ª–∫—É (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
      for (const hrefMatch of hrefMatches) {
        const urlMatch = hrefMatch.match(/href=["']([^"']*)["']/i);
        if (urlMatch && urlMatch[1]) {
          const candidateLink = urlMatch[1];
          if (!link || candidateLink.length > link.length) {
            link = candidateLink;
          }
        }
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ href, –∏—â–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –≤ —Ç–µ–∫—Å—Ç–µ HTML
    if (!link) {
      for (const pattern of appointmentPatterns) {
        const match = htmlContent.match(pattern);
        if (match) {
          link = match[1];
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ HTML –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É:', pattern.toString());
          break;
        }
      }
    }
  }

  // –ü–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
  if (!link && textContent) {
    console.log('üîç –ü–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–º...');
    for (const pattern of appointmentPatterns) {
      const match = textContent.match(pattern);
      if (match) {
        link = match[1];
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É:', pattern.toString());
        break;
      }
    }
  }

  if (link) {
    console.log('üîó –°—Å—ã–ª–∫–∞ –î–û –æ–±—Ä–∞–±–æ—Ç–∫–∏:', link);

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML entities
    const originalLink = link;
    link = link.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"');

    console.log('üîó –°—Å—ã–ª–∫–∞ –ü–û–°–õ–ï –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è HTML entities:', link);

    // –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–Ω—Ü–µ
    link = link.replace(/[>\]}\)]*$/, '');

    console.log('üîó –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å:', link);
    console.log('üìè –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞:', link.length);

    return link;
  }

  console.log('‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  return null;
}

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ IMAP
async function connectToImap(email, password) {
  const config = {
    imap: {
      user: email,
      password,
      host: 'imap.firstmail.ltd',
      port: 993,
      tls: true,
      tlsOptions: {
        rejectUnauthorized: false,
        servername: 'imap.firstmail.ltd'
      },
      authTimeout: 10000,
      connTimeout: 10000
    }
  };

  console.log('–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ IMAP —Å–µ—Ä–≤–µ—Ä—É...');
  const connection = await Imap.connect(config);
  console.log('IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

  await connection.openBox('INBOX');
  console.log('INBOX –æ—Ç–∫—Ä—ã—Ç');

  return connection;
}

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å–µ–º
async function processEmails(connection, criteria, linkExtractor, emailType) {
  const fetchOptions = {
    bodies: ['HEADER', 'TEXT', ''], // –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ —Å–µ–∫—Ü–∏–∏
    struct: true,
    markSeen: false
  };

  console.log(`–ò—â–µ–º –ø–∏—Å—å–º–∞ —Ç–∏–ø–∞: ${emailType}...`);
  const messages = await connection.search(criteria, fetchOptions);

  if (!messages.length) {
    console.log(`–ü–∏—Å—å–º–∞ —Ç–∏–ø–∞ ${emailType} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
    return { message: `No ${emailType} emails found` };
  }

  console.log(`–ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º: ${messages.length}`);

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –±–µ—Ä—ë–º —Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ
  messages.sort((a, b) => {
    const dateA = new Date(a.attributes.date);
    const dateB = new Date(b.attributes.date);
    return dateB - dateA;
  });

  const latest = messages[0];
  console.log('–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏—Å—å–º–∞:', latest.attributes.date);

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
  let emailBody = '';
  let htmlContent = '';

  if (latest.parts && latest.parts.length > 0) {
    console.log('–ß–∞—Å—Ç–∏ –ø–∏—Å—å–º–∞:', latest.parts.map(p => ({ which: p.which, size: p.body ? p.body.length : 0 })));

    // –û–¢–õ–ê–î–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
    console.log('üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏:');
    for (const part of latest.parts) {
      if (part.body && typeof part.body === 'string') {
        console.log(`\n--- –ß–∞—Å—Ç—å ${part.which} (${part.body.length} —Å–∏–º–≤–æ–ª–æ–≤) ---`);
        console.log(part.body.substring(0, 1000));
        console.log('--- –ö–æ–Ω–µ—Ü —á–∞—Å—Ç–∏ ---\n');
      }
    }

    for (const part of latest.parts) {
      if (part.body && typeof part.body === 'string') {
        emailBody += part.body + '\n';

        // –ò—â–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –ª—é–±–æ–π —á–∞—Å—Ç–∏
        if (part.body.includes('<html') || part.body.includes('<a href') || part.body.includes('<table')) {
          htmlContent = part.body;
          console.log('HTML –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Å—Ç–∏:', part.which, '–¥–ª–∏–Ω–∞:', htmlContent.length);
        }
      }
    }
  }

  if (!emailBody) {
    console.log('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    return {
      error: 'Email body not found',
      debug: {
        messageCount: messages.length,
        latestDate: latest.attributes.date,
        partsCount: latest.parts ? latest.parts.length : 0
      }
    };
  }

  console.log('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞ –Ω–∞–π–¥–µ–Ω–æ, –æ–±—â–∞—è –¥–ª–∏–Ω–∞:', emailBody.length);

  console.log('–ò—â–µ–º —Å—Å—ã–ª–∫—É...');
  let link = linkExtractor(htmlContent, emailBody);

  if (!link) {
    console.log('–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã...');

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ HTML
    if (htmlContent) {
      const $ = load(htmlContent);

      // –ò—â–µ–º –ª—é–±—É—é —Å—Å—ã–ª–∫—É —Å blsinternational (–ë–ï–ó –æ—á–∏—Å—Ç–∫–∏!)
      const blsLink = $('a[href*="blsinternational"]').attr('href');
      if (blsLink) {
        link = blsLink;
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ BLS —Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ cheerio:', link);
      }
    }

    // –ü–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–µ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —à–∏—Ä–æ–∫–∏–π –ø–æ–∏—Å–∫
    if (!link) {
      const urlRegex = /(https?:\/\/[^\s\n\r\t]+blsinternational\.com[^\s\n\r\t]*)/gi;
      const matches = emailBody.match(urlRegex);
      if (matches && matches.length > 0) {
        console.log('üîç –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ:');
        matches.forEach((match, i) => {
          console.log(`  ${i + 1}. –î–ª–∏–Ω–∞: ${match.length}, URL: ${match.substring(0, 150)}...`);
        });

        // –ë–µ—Ä–µ–º —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é —Å—Å—ã–ª–∫—É (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
        link = matches.reduce((longest, current) =>
          current.length > longest.length ? current : longest
        );
        console.log('‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞:', link.substring(0, 200) + '...');
      } else {
        console.log('‚ùå –ù–∏–∫–∞–∫–∏—Ö —Å—Å—ã–ª–æ–∫ blsinternational –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–µ–∫—Å—Ç–µ');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤ email –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('üìß –ù–∞—á–∞–ª–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ email:');
        console.log(emailBody.substring(0, 2000));
      }
    }
  }

  console.log('–§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞–π–¥–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞:', link);

  if (!link) {
    console.log('–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∏—Å—å–º–µ');
    return {
      error: `${emailType} link not found`,
      debug: {
        bodyLength: emailBody.length,
        bodyPreview: emailBody.substring(0, 1000),
        hasHtmlContent: !!htmlContent,
        htmlContentLength: htmlContent.length,
        containsClickHere: emailBody.toLowerCase().includes('click here'),
        containsHttp: emailBody.includes('http'),
        containsBls: emailBody.includes('blsinternational'),
        containsOtpVerify: emailBody.includes('email_otp_verify'),
        containsAppointment: emailBody.toLowerCase().includes('appointment'),
        containsBooking: emailBody.toLowerCase().includes('booking')
      }
    };
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
  return { 
    link,
    emailDate: latest.attributes.date,
    emailDescription: emailType
  };
}

// ENDPOINT –¥–ª—è OTP –ø–∏—Å–µ–º (—Ç–µ–º–∞: "OTP Confirmation")
app.post('/mail/otp', async (req, res) => {
  const { email, password } = req.body;
  if (!email || !password) {
    return res.status(400).json({ error: 'email and password required' });
  }

  console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ IMAP –¥–ª—è OTP: ${email}`);

  let connection = null;

  try {
    connection = await connectToImap(email, password);

    // –ò—â–µ–º –ø–∏—Å—å–º–∞ –æ—Ç noreply.app@blsinternational.com —Å —Ç–µ–º–æ–π OTP Confirmation
    const criteria = [
      ['FROM', 'noreply.app@blsinternational.com'],
      ['SUBJECT', 'OTP Confirmation']
    ];

    const result = await processEmails(connection, criteria, extractVerificationLink, 'OTP Confirmation');
    
    await connection.end();
    console.log('IMAP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');

    if (result.error) {
      return res.status(500).json(result);
    }

    if (result.message) {
      return res.json(result);
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É
    console.log('OTP —Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
    res.json(result);

  } catch (err) {
    console.error('IMAP Error (OTP):', err);

    if (connection) {
      try {
        await connection.end();
      } catch (closeErr) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', closeErr);
      }
    }

    let errorMessage = err.message;
    if (err.textCode === 'AUTHENTICATIONFAILED') {
      errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è IMAP';
    } else if (err.message.includes('timeout')) {
      errorMessage = '–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ IMAP —Å–µ—Ä–≤–µ—Ä—É';
    } else if (err.message.includes('ENOTFOUND')) {
      errorMessage = 'IMAP —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
    } else if (err.message.includes('Invalid BODY')) {
      errorMessage = '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ IMAP –∑–∞–ø—Ä–æ—Å–∞';
    }

    res.status(500).json({
      error: errorMessage,
      details: err.message
    });
  }
});

// ENDPOINT –¥–ª—è –ø–∏—Å–µ–º –æ –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤–∏–∑—É (—Ç–µ–º–∞: "Slovakia Visa Appointment Booking Link")
app.post('/mail/appointment', async (req, res) => {
  const { email, password } = req.body;
  if (!email || !password) {
    return res.status(400).json({ error: 'email and password required' });
  }

  console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ IMAP –¥–ª—è Appointment: ${email}`);

  let connection = null;

  try {
    connection = await connectToImap(email, password);

    // –ò—â–µ–º –ø–∏—Å—å–º–∞ —Å —Ç–µ–º–æ–π "Slovakia Visa Appointment Booking Link"
    const criteria = [
      ['SUBJECT', 'Slovakia Visa Appointment Booking Link']
    ];

    const result = await processEmails(connection, criteria, extractAppointmentLink, 'Slovakia Visa Appointment Booking Link');
    
    await connection.end();
    console.log('IMAP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');

    if (result.error) {
      return res.status(500).json(result);
    }

    if (result.message) {
      return res.json(result);
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É
    console.log('Appointment —Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
    res.json(result);

  } catch (err) {
    console.error('IMAP Error (Appointment):', err);

    if (connection) {
      try {
        await connection.end();
      } catch (closeErr) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', closeErr);
      }
    }

    let errorMessage = err.message;
    if (err.textCode === 'AUTHENTICATIONFAILED') {
      errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è IMAP';
    } else if (err.message.includes('timeout')) {
      errorMessage = '–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ IMAP —Å–µ—Ä–≤–µ—Ä—É';
    } else if (err.message.includes('ENOTFOUND')) {
      errorMessage = 'IMAP —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
    } else if (err.message.includes('Invalid BODY')) {
      errorMessage = '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ IMAP –∑–∞–ø—Ä–æ—Å–∞';
    }

    res.status(500).json({
      error: errorMessage,
      details: err.message
    });
  }
});

// LEGACY ENDPOINT –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
app.post('/mail', async (req, res) => {
  console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π endpoint /mail, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /mail/otp');
  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π OTP endpoint
  req.url = '/mail/otp';
  return app._router.handle(req, res);
});

app.get('/', (req, res) => {
  res.send('Firstmail IMAP API up and running - Updated with specialized endpoints');
});

app.get('/test', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    server: 'imap.firstmail.ltd:993',
    endpoints: {
      otp: '/mail/otp - –¥–ª—è –ø–∏—Å–µ–º —Å —Ç–µ–º–æ–π "OTP Confirmation"',
      appointment: '/mail/appointment - –¥–ª—è –ø–∏—Å–µ–º —Å —Ç–µ–º–æ–π "Slovakia Visa Appointment Booking Link"',
      legacy: '/mail - —É—Å—Ç–∞—Ä–µ–≤—à–∏–π endpoint (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ /mail/otp)'
    }
  });
});

const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`Server started on port ${port}`);
  console.log(`Test endpoint: http://localhost:${port}/test`);
  console.log('üìß –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:');
  console.log('  - POST /mail/otp - –¥–ª—è OTP –ø–∏—Å–µ–º');
  console.log('  - POST /mail/appointment - –¥–ª—è –ø–∏—Å–µ–º –æ –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤–∏–∑—É');
  console.log('  - POST /mail - legacy endpoint (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ /mail/otp)');
});
